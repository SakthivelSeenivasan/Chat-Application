{"ast":null,"code":"var _jsxFileName = \"/home/vvdn/sai/src/Components/AddUser.js\";\nimport React, { useState } from 'react';\nimport Modal from 'antd/lib/modal/Modal';\nimport Button from 'antd/es/button';\nimport { v4 } from 'uuid';\nimport { useEffect } from 'react';\n\nconst AddUser = ({\n  colors,\n  randomNumber,\n  addEditUser,\n  addUser,\n  editUser,\n  setAddUser\n}) => {\n  const [visible, setVisible] = useState(false);\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n  const [company, setCompany] = useState('');\n  const [error, setError] = useState({});\n\n  const clearData = () => {\n    setFullName('');\n    setEmail('');\n    setPhone('');\n    setCompany('');\n    setVisible(false);\n  };\n\n  useEffect(() => {\n    if (addUser) {\n      setFullName(addUser.fullName);\n      setEmail(addUser.email);\n      setPhone(addUser.phone);\n      setCompany(addUser.companyName);\n      setVisible(true);\n    }\n  }, [addUser]);\n\n  const handleSubmit = () => {\n    setError({});\n    let err = false;\n\n    if (fullName === '') {\n      setError(prvErr => ({ ...prvErr,\n        fullName: 'UserName should not be empty'\n      }));\n      err = true;\n    }\n\n    var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n\n    if (!pattern.test(email)) {\n      setError(prvErr => ({ ...prvErr,\n        email: 'Invalid Email'\n      }));\n      err = true;\n    }\n\n    if (email === '') {\n      setError(prvErr => ({ ...prvErr,\n        email: 'Email should not be empty'\n      }));\n      err = true;\n    }\n\n    if (`${phone}`.length !== 10) {\n      setError(prvErr => ({ ...prvErr,\n        phone: 'Invalid Phone Number'\n      }));\n      err = true;\n    }\n\n    if (company === '') {\n      setError(prvErr => ({ ...prvErr,\n        company: 'Company should not be empty'\n      }));\n      err = true;\n    }\n\n    if (err) {\n      return;\n    }\n\n    const avatarName = fullName.split(' ');\n    const data = {\n      key: v4(),\n      company: company,\n      email: email,\n      fullName: fullName,\n      phone: phone,\n      avatarName: `${avatarName[0][0]}${avatarName[1] ? avatarName[1][0] : ''}`,\n      color: colors[randomNumber()]\n    };\n\n    if (!addUser) {\n      addEditUser('add', data);\n    } else {\n      addEditUser('edit', { ...data,\n        key: addUser.key\n      }, addUser.key);\n    }\n\n    clearData();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-primary\",\n    onClick: e => {\n      editUser(e, null);\n      setVisible(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, \"+ Add User\"), /*#__PURE__*/React.createElement(Modal, {\n    visible: visible,\n    title: \"User Details\",\n    onCancel: () => {\n      setVisible(false);\n      clearData();\n      setAddUser(null);\n    },\n    footer: [/*#__PURE__*/React.createElement(Button, {\n      key: \"submit\",\n      type: \"primary\",\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, \"Submit\")],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input__grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"fullName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, \"Full Name\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input__data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"fullName\",\n    placeholder: \"Full Name\",\n    value: fullName,\n    onChange: e => setFullName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }), error.fullName && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 32\n    }\n  }, error.fullName)), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input__data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    id: \"email\",\n    placeholder: \"Email\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }), error.email && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 29\n    }\n  }, error.email)), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"phone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, \"Phone Number\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input__data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    id: \"phone\",\n    placeholder: \"Phone Number\",\n    value: phone,\n    onChange: e => setPhone(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }), error.phone && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 29\n    }\n  }, error.phone)), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"company\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, \"Company Name\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input__data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"company\",\n    placeholder: \"Company Name\",\n    value: company,\n    onChange: e => setCompany(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }), error.company && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 31\n    }\n  }, error.fullName)))));\n};\n\nexport default AddUser;","map":{"version":3,"sources":["/home/vvdn/sai/src/Components/AddUser.js"],"names":["React","useState","Modal","Button","v4","useEffect","AddUser","colors","randomNumber","addEditUser","addUser","editUser","setAddUser","visible","setVisible","fullName","setFullName","email","setEmail","phone","setPhone","company","setCompany","error","setError","clearData","companyName","handleSubmit","err","prvErr","pattern","RegExp","test","length","avatarName","split","data","key","color","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Modal from 'antd/lib/modal/Modal';\nimport Button from 'antd/es/button';\nimport { v4 } from 'uuid';\nimport { useEffect } from 'react';\n\nconst AddUser = ({\n  colors,\n  randomNumber,\n  addEditUser,\n  addUser,\n  editUser,\n  setAddUser,\n}) => {\n  const [visible, setVisible] = useState(false);\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n  const [company, setCompany] = useState('');\n\n  const [error, setError] = useState({});\n\n  const clearData = () => {\n    setFullName('');\n    setEmail('');\n    setPhone('');\n    setCompany('');\n    setVisible(false);\n  };\n\n  useEffect(() => {\n    if (addUser) {\n      setFullName(addUser.fullName);\n      setEmail(addUser.email);\n      setPhone(addUser.phone);\n      setCompany(addUser.companyName);\n      setVisible(true);\n    }\n  }, [addUser]);\n\n  const handleSubmit = () => {\n    setError({});\n    let err = false;\n    if (fullName === '') {\n      setError((prvErr) => ({\n        ...prvErr,\n        fullName: 'UserName should not be empty',\n      }));\n      err = true;\n    }\n    var pattern = new RegExp(\n      /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i\n    );\n    if (!pattern.test(email)) {\n      setError((prvErr) => ({ ...prvErr, email: 'Invalid Email' }));\n      err = true;\n    }\n    if (email === '') {\n      setError((prvErr) => ({ ...prvErr, email: 'Email should not be empty' }));\n      err = true;\n    }\n    if (`${phone}`.length !== 10) {\n      setError((prvErr) => ({ ...prvErr, phone: 'Invalid Phone Number' }));\n      err = true;\n    }\n    if (company === '') {\n      setError((prvErr) => ({\n        ...prvErr,\n        company: 'Company should not be empty',\n      }));\n      err = true;\n    }\n\n    if (err) {\n      return;\n    }\n\n    const avatarName = fullName.split(' ');\n    const data = {\n      key: v4(),\n      company: company,\n      email: email,\n      fullName: fullName,\n      phone: phone,\n      avatarName: `${avatarName[0][0]}${avatarName[1] ? avatarName[1][0] : ''}`,\n      color: colors[randomNumber()],\n    };\n    if (!addUser) {\n      addEditUser('add', data);\n    } else {\n      addEditUser('edit', { ...data, key: addUser.key }, addUser.key);\n    }\n    clearData();\n  };\n\n  return (\n    <div>\n      <button\n        className=\"btn-primary\"\n        onClick={(e) => {\n          editUser(e, null);\n          setVisible(true);\n        }}\n      >\n        + Add User\n      </button>\n      <Modal\n        visible={visible}\n        title=\"User Details\"\n        onCancel={() => {\n          setVisible(false);\n          clearData();\n          setAddUser(null);\n        }}\n        footer={[\n          <Button key=\"submit\" type=\"primary\" onClick={handleSubmit}>\n            Submit\n          </Button>,\n        ]}\n      >\n        <div className=\"input__grid\">\n          <label htmlFor=\"fullName\">Full Name</label>\n          <div className=\"input__data\">\n            <input\n              type=\"text\"\n              id=\"fullName\"\n              placeholder=\"Full Name\"\n              value={fullName}\n              onChange={(e) => setFullName(e.target.value)}\n            />\n            {error.fullName && <span className=\"error\">{error.fullName}</span>}\n          </div>\n\n          <label htmlFor=\"email\">Email</label>\n          <div className=\"input__data\">\n            <input\n              type=\"email\"\n              id=\"email\"\n              placeholder=\"Email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            {error.email && <span className=\"error\">{error.email}</span>}\n          </div>\n\n          <label htmlFor=\"phone\">Phone Number</label>\n          <div className=\"input__data\">\n            <input\n              type=\"number\"\n              id=\"phone\"\n              placeholder=\"Phone Number\"\n              value={phone}\n              onChange={(e) => setPhone(e.target.value)}\n            />\n            {error.phone && <span className=\"error\">{error.phone}</span>}\n          </div>\n          <label htmlFor=\"company\">Company Name</label>\n          <div className=\"input__data\">\n            <input\n              type=\"text\"\n              id=\"company\"\n              placeholder=\"Company Name\"\n              value={company}\n              onChange={(e) => setCompany(e.target.value)}\n            />\n            {error.company && <span className=\"error\">{error.fullName}</span>}\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default AddUser;\n"]},"metadata":{},"sourceType":"module"}